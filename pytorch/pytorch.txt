--------------
define a model:
class newModel(nn.model):
	def __init__(self, input_dim, output_dim):

	def forward(self, x):


--------------
create model,criterion/optimizer:

eg:
model = LinearRegression(input_dim, output_dim)
criterion = nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)  


--------------
In each epoch:
1. inputs = Variable(...)
   targets = Variable(...)
2. optimizer.zero_grad()  	: model / optimizer
3. outputs = model(inputs)	: compute output
4. loss = criterion(outputs, targets) : compute loss
5. loss.backword()			: to get grad
6. optimizer.step()			: to perform weight update



CNN example
--------------
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()

        self.conv1 = nn.Conv2d(3, 6, 5)			#nn.Conv2d指输入为2维数据，3指数据有3个通道(3层:RGB)，6指输出6个通道，5指5*5的filter
        self.pool  = nn.MaxPool2d(2,2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1   = nn.Linear(16*5*5, 120)
        self.fc2   = nn.Linear(120, 84)
        self.fc3   = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16*5*5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

net = Net()







data format:
-------------
m = nn.Conv2d(in_Channel, out_channel, kernel)
input = autograd.Variable(torch.randn(数据量, in_channel, row, col))
output = m(input)




显示时间
-------------
import time
print(time.strftime("%H:%M:%S"))









skills in pytorch
--------------------------------
--------------------------------
1. bug最常见情况：
    a:维度与对应维度的数据不符合要求
    b:数据类型不符合要求

2. Variable -> Tensor:
    eg: x:Variable
    x.data


3. 合并Variable
v1 = Variable(torch.rand(5,3,2))
v2 = Variable(torch.rand(5,2,2))
v3 = Variable(torch.rand(5,1,2))
vv = torch.cat((v1,v2,v3), 1)   # 第二个参数表示要合并的维度, 0,1,2... ,其他维度的大小要相同
print(vv.size())
=>torch.Size([5, 6, 2])


4. 改变Variable数据类型
v = Variable(torch.rand(3,2))
# v : torch.FloatTensor

v = v.long()
# v : torch.LongTensor

v = v.double()
# v : torch.DoubleTensor


5. Variable与Tensor都能按下标取值
v = Variable(torch.rand(5,3,2))
v[1][2][1]
v.data[1][2][3]


6. Tensor可以按下标赋值: z[1] = 123
   Variable不行，除非转化为Tensor


7. BatchNorm的参数:
	BatchNorm1d(神经元数量)
	BatchNorm2d(channel数量)

8. 神经网络接受的数据格式:
	Linear: [batch][data]
	Conv1d:	[batch][channel][data]
	Conv2d:	[batch][channel][data_w][data_h]


9. torchvision.utils.save_image(tensor,filepath)像素值与颜色的问题
	值的范围要在[-1,1]之间
	值：[-1 -> 0 -> 1]: 颜色：黑色 -> 灰色 -> 白色
	在[-1,1]范围之外的值会按照加减2调整到[-1,1]之间,eg: 1.5 -> -0.5, 2 -> 0, -1.5 -> 0.5, 5.5 -> -0.5
	



